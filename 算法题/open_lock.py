# coding: utf-8
'''
你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' 。每个拨轮可以自由旋转：例如把 '9' 变为  '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。

锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。

列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。

字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。
'''
class Solution(object):
    # 单向搜索解法，运算时间太长
    def openLock(self, deadends, target):
        """
        :type deadends: List[str]
        :type target: str
        :rtype: int
        """
        count = 0
        init = "0000"
        
        if init == target:
            return count
        
        if init in deadends or target in deadends:
            return -1
        
        visit = {}          # 用字典，提高not in检索效率
        for one in deadends:
            visit[one] = None

        queue = [init, ]
        while len(queue) != 0:
            change_flag = False         

            queue2 = []
            for i in range(len(queue)):      
                for next in self.getNexts(queue[i]):
                    if next == target:
                        return count + 1
                    
                    if  next not in visit:
                        queue2.append(next)
                        visit[next] = None
                        change_flag = True

            queue = queue2
            if change_flag:
                count += 1

        return -1
    
    def getNexts(self, target):
        for i in range(len(target)):
            for d in (1, -1):
                y = (int(target[i]) + d + 10) % 10
                yield target[:i] + str(y) + target[i+1:]

    # 双向搜索算法
    def openLock2(self, deadends, target):
        
        count = 0
        init = "0000"
        
        if init in deadends or target in deadends:
            return -1
        if init == target:
            return count
    
        visit = {}          # 用字典，提高not in检索效率
        for one in deadends:
            visit[one] = None

        queue = [init, ]
        queue2 = [target, ]

        while len(queue) != 0 and len(queue2) != 0:
            if len(queue) > len(queue2):
                queue, queue2 = queue2, queue

            queue3 = []
            for i in range(len(queue)):
                for next in self.getNexts(queue[i]):
                    if next in queue2:
                        return count + 1
                    
                    if next not in visit:
                        queue3.append(next)
                        visit[next] = None

            queue = queue3
            count += 1

        return -1


if __name__ == "__main__":
    deadends = ["0201","0101","0102","1212","2002"]
    target = "0202"
    print "single way ", Solution().openLock(deadends, target)
    print "both way ", Solution().openLock2(deadends, target)

    deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"]
    target = "8888"
    print "single way ", Solution().openLock(deadends, target)
    print "both way ", Solution().openLock2(deadends, target)

    deadends = ["6586","6557","0399","3436","1106","4255","1161","7546","2375","5535","7623","0805","7045","8244","1804","1777","5152","7241","4488","3653","7485","9103","2726","4624","8654","1404","9321","5145","4237","5423","9350","3383","8658","2601","2446","1605","6804","1521","0832","5555","6710","3851","6370","0069","7369","6352","4165","4327","9727","1363","9906","9463","8628","5239","0009","2743","0419","4722","7251","5645","5159","4040","1406","5836","0623","9851","2970","0479","1707","5248","0135","8840","9395","1068","9653","4461","6830","7851","7798","3745","1608","2061","5404","3536","3875","3552","8430","0846","5575","2835","1777","5848","5181","8129","2408","3257","9168","3279","4705","9799","1592","7849","4934","1210","0384","3946","5200","3702","4792","1363","0340","4623","9837","0798","2400","0859","3002","1819","2925","8966","7065","3310","1415","9986","7612","1233","9681","6869","5324","4271","1632","2947","8829","9102","9502","4896","2556","4998","7642","8477","4439","8391","7171","2081","5401","0369","4498","1269","2535","7805","6611","1605","1432","6237","5565","9618","2123","5178","3649","8657","6236","6737","1561","1802","1349","9738","6245","7202","8442","7183","5105","7963","0259","5622","3098","0664","7366","1556","5711","9981","4607","2063","7540","1818","7320","8505","1028","6127","1816","8961","7126","4739","4050","7729","5887","4836","1244","2697","3937","9817","2759","9536","0154","7214","5688","1284","5434","7103","2704","6790","3244","8797","3860","1988","1458","4268","1901","4787","7599","6672","3579","3726","6670","1603","3332","7249","0984","6783","4456","0023","2678","0167","8626","6080","5716","5083","6135","8700","7890","8683","2089","0264","2123","0787","3056","2647","4645","8748","6936","6899","0031","4934","0221","9481","9959","1386","7695","2034","0466","0809","9166","6381","6937","0744","8059","8498","5772","8379","4448","5794","7423","2568","4671","6408","4335","1655","3662","1250","5262","7197","6831","8004","0575","8784","2920","0869","7157","0153","7255","1541","1247","5498","0566","6632","7640","1733","2546","5110","2852","8042","8175","0284","8589","8918","5755","2289","0812","4850","4650","9018","6649","5099","6532","9891","8675","1718","5442","6786","8915","3710","3833","2659","7040","3959","2505","7574","1199","3465","4557","7230","9161","5177","7815","4564","1470","8051","6287","2504","4025","8911","6158","6857","8948","7991","3670","3413","0423","7184","7921","1351","8908","1921","1685","5579","4641","0286","6410","2800","7018","1402","7410","3471","1312","9530","4581","5364","4820","8192","3088","4714","2255","2342","5042","8673","9788","2203","0879","2345","9712","2008","0652","0939","0720","2954","4482","2390","0807","4634","6266","5222","6898","7491","0294","1811","0667","8282","5754","1841","9518","9093","7904","4902","0068","5157","7823","8073","8801","8179","1402","9977","2332","9448","2251","8455","6157","1878","4183","3331","8047","1254","9639","2156","5780","7359","0260","9683","6842","1098","6495","2057","6583","0932","2577","1818","6042","8358","1833","5512","4529","0583","9955","9205","6055","3322","2232","5372","5835","2202","9696","1596","3424","3696","5695","1365","6432","0327","1565","8509","6936","3363","3007","3107","0410","6258","2492","0300","1255","1664","8666","6826","9961","5782","0140","5567","9596","1680","1892","5016","8804","4962","9318","4540","5044","0979","2004","4265","7689","0289","3434","6090","1375","3135","3935","5140","9255","3997","3482","8150","8164","0787"]
    target = "8828"
    print "single way ", Solution().openLock(deadends, target)
    print "both way ", Solution().openLock2(deadends, target)

    deadends = ["2663","7363","2311","8379","9055","0185","5250","2534","4197","1940","4551","5166","9904","1259","3930","7429","6117","1842","6544","1976","8241","8433","9614","9561","1928","4730","8660","7036","9008","2132","1479","6943","5551","3975","3396","7423","3404","8428","3100","7309","8641","4014","3851","2194","7987","6565","6721","8584","7144","4587","9259","2664","9882","6002","7244","3472","1667","2084","3993","9940","2734","3075","6145","7772","3284","9481","2194","3990","6307","8925","3358","3980","6850","4361","3102","0541","7084","1767","3693","4513","7833","5181","5954","1283","0414","3661","2615","0114","5616","6679","2475","7564","7184","4389","7860","3964","3752","4476","9622","8862","7185","3709","9115","8230","0255","8755","4522","4186","2664","8789","6132","8375","1850","9777","3624","1025","5941","1604","0954","0641","7910","7807","0483","3616","1411","4587","5386","2258","0807","7362","7559","1397","2166","3574","6056","2702","4258","9914","3546","3367","1551","5791","5763","2354","4568","4316","5755","4516","0278","7413","2906","6914","0392","6854","6336","3559","9596","7579","1445","1646","7395","4359","8801","5487","4553","1144","2754","8675","3082","6056","9580","2903","6941","2944","9160","3749","3064","4588","9808","2539","6390","6953","0051","9972","5911","0671","4810","3896","9486","8412","9286","4067","7349","9938","0658","7719","6027","2519","9184","0033","5781","5867","1083","3262","7983","5441","7150","8944","8543","0252","2296","4780","0060","1408","4610","8213","5111","9817","1465","0787","5145","5780","0398","4089","5997","1837","2693","3769","5491","8576","1435","4610","3575","7778","7882","0995","2530","4080","9121","2883","2288","4038","4696","3088","9969","0319","3695","9068","2996","3706","4514","1997","9416","8519","7593","6144","9204","7276","7454","1911","7241","6848","3437","2575","0182","1035","9870","3126","1444","7577","7107","6910","1786","3762","6602","4867","8127","7572","3987","2933","1822","7119","2904","2312","8021","4550","5577","9951","8320","1090","3133","9068","5969","0148","4633","2948","3739","2202","8040","1023","0743","0785","7750","1560","5829","4422","8909","0425","5764","1665","8510","7969","1355","2054","7243","9763","6613","9556","3754","5298","7151","4893","0650","3156","8354","5402","5330","2933","7797","5211","9946","6790","6243","6905","1043","5964","9680","9755","4808","4042","5408","5167","0102","3095","3845","2437","4943","6936","5030","5733","0928","4513","7545","2749","8234","5167","6357","6007","4828","2466","8060","9782","6031","0396","5459","6029","8861","8122","2535","2950","4952","2103","9757","9438","0120","6905","4829","2355","3907","8874","1844","9059","3222","9640","9944","9949","3588","6333","8251","0870","5978","7930","5092","3374","0878","0812","2045","0371","3388","1263","0707","8966","5442","7232","6605","0994","3081","7716","1164","8876","1361","8576","2624","1209","5535","6751","9688","0944","7083","9524","9135","6330","7792","1964","7744","0367","1488","4668","7170","6968","0798","6768","0303","1811","5270","3137","0502","2239","3746","8902","1447","6048","3822","6007","8217","0430","1387","3421","9992","0204","1422","4696","1302","3162","5705","3889","5290","7864","3786","9341","3398","6967","3572","6372","6602","1678","4576","1164","2920","6201","7129","7526","6517","4989","2443","1106","5277","7082","3656","5817","8557","0457","2939","2257","3986","7223","2786","0423","7834","0571","0189","1861","2937","8069","6279","5643","2147","1970","7323","4413"]
    target = "1064"
    print "single way ", Solution().openLock(deadends, target)
    print "both way ", Solution().openLock2(deadends, target)